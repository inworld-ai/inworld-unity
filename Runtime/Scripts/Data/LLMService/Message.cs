/*************************************************************************************************
 * Copyright 2022-2024 Theai, Inc. dba Inworld AI
 *
 * Use of this source code is governed by the Inworld.ai Software Development Kit License Agreement
 * that can be found in the LICENSE.md file or at https://www.inworld.ai/sdk-license
 *************************************************************************************************/

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace Inworld.Entities.LLM
{
	public class Message
	{
		[JsonConverter(typeof(StringEnumConverter))]
		public MessageRole role; // The role of the messages author.
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public List<ToolCall> tool_calls; // The tool calls generated by the model, such as function calls.
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public string tool_call_id; // Tool call that this message is responding to.
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public string name; // Provides the model information to differentiate between participants of the same role.

		[JsonIgnore]
		public bool IsPlayer => role == MessageRole.MESSAGE_ROLE_USER;
		
		[JsonIgnore]
		public string Role 
		{
			get
			{
				switch (role)
				{
					case MessageRole.MESSAGE_ROLE_TOOL:
						return string.IsNullOrEmpty(tool_call_id) ? "Tool" : tool_call_id;
					case MessageRole.MESSAGE_ROLE_USER:
						return InworldAI.User.Name;
					case MessageRole.MESSAGE_ROLE_ASSISTANT:
						return "Inworld";
					case MessageRole.MESSAGE_ROLE_SYSTEM:
						return "System";
					default:
						return "";
				}
			}
		}
		[JsonIgnore]
		public virtual string ToMessage => $"{Role}: ";
	}
	// New content of the message, which can be either a plain text or a collection of content items.
	public class TextMessage : Message
	{
		public string text_content;
		
		[JsonIgnore]
		public override string ToMessage => $"{Role}: {text_content}";

		public TextMessage()
		{
			
		}
		public TextMessage(string content, MessageRole player = MessageRole.MESSAGE_ROLE_USER)
		{
			role = player;
			text_content = content;
		}
	}
	public class ContentMessage : Message
	{
		public ContentItems content_items;
	}

	public static class MessageFactory
	{
		public static Message Create(string input)
		{
			return new TextMessage(input.Replace("\n", ""));
		}
		public static Message CreateFromAgent(string input)
		{
			return new TextMessage(input, MessageRole.MESSAGE_ROLE_ASSISTANT);
		}
	}
}
